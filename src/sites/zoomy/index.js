/**
 * Site Zoomy - Configuraci√≥n e Inicializaci√≥n
 * 
 * Este archivo integra:
 * - Sistema de configuraci√≥n modular (site.config.js)
 * - Sistema de inicializaci√≥n de m√≥dulos (ModuleInitializer)
 * - Sistema de rutas din√°micas (routesRegistry)
 * 
 * Flujo de inicializaci√≥n:
 * 1. Cargar site.config.js (define m√≥dulos e instancias)
 * 2. Inicializar ModuleInitializer
 * 3. ModuleInitializer carga m√≥dulos en orden correcto
 * 4. Cada m√≥dulo registra sus rutas usando registerModuleRoutes
 * 5. Site registra sus rutas base usando registerSiteRoutes
 */

import { registerSiteRoutes } from '../../zoom/routing/routesRegistry.js';
import { ModuleInitializer } from '../../zoom/modules/ModuleInitializer.js';
import { policyProcessor } from '../../zoom/security/policyProcessor.js';
import { routes } from './routes/index.js';
import siteConfig from './site.config.js'; // Usar la nueva configuraci√≥n modular

// Instancia del inicializador de m√≥dulos
let moduleInitializer = null;

export default {
  name: "zoomy",
  
  // Nueva configuraci√≥n modular del sitio
  config: siteConfig,
  
  // Lista de m√≥dulos ra√≠z del site (primer nivel de jerarqu√≠a)
  // Estos m√≥dulos definen las rutas base: /zoomy/auth y /zoomy/admin
  // La jerarqu√≠a interna (ej: /zoomy/admin/auth) se construye dentro de cada m√≥dulo
  modules: ['auth', 'admin'],
  
  // Sin dependencias a nivel de site (se manejan a nivel de m√≥dulo)
  dependencies: [],
  
  /**
   * Funci√≥n de instalaci√≥n del sitio
   * Ahora usa ModuleInitializer para gestionar todo el ciclo de vida
   */
  install: async () => {
    console.log('üöÄ ========================================');
    console.log('üöÄ Inicializando Site: Zoomy');
    console.log('üöÄ ========================================');
    
    try {
      // 0. Registrar jerarqu√≠a de m√≥dulos en PolicyProcessor
      console.log('üìç Paso 0: Registrando jerarqu√≠a de m√≥dulos...');
  await registerModuleHierarchyInPolicy();
      console.log('‚úÖ Jerarqu√≠a de m√≥dulos registrada');
      
      // 1. Registrar rutas base del site
      console.log('üìç Paso 1: Registrando rutas base del site...');
      registerSiteRoutes("zoomy", routes);
      console.log('‚úÖ Rutas base del site registradas');
      
      // 2. Crear instancia del ModuleInitializer
      console.log('üìç Paso 2: Creando ModuleInitializer...');
      moduleInitializer = new ModuleInitializer(siteConfig);
      console.log('‚úÖ ModuleInitializer creado');
      
      // 3. Configurar listeners de eventos
      setupEventListeners(moduleInitializer);
      
      // 4. Inicializar todos los m√≥dulos
      console.log('üìç Paso 3: Inicializando m√≥dulos...');
      await moduleInitializer.initialize();
      console.log('‚úÖ M√≥dulos inicializados correctamente');
      
      // 5. Registrar rutas de m√≥dulos din√°micamente
      console.log('üìç Paso 4: Registrando rutas de m√≥dulos...');
      await registerModuleRoutes(moduleInitializer);
      console.log('‚úÖ Rutas de m√≥dulos registradas');
      
      console.log('üéâ ========================================');
      console.log('üéâ Site Zoomy inicializado correctamente');
      console.log('üéâ ========================================');
      
      // Mostrar diagn√≥stico
      const diagnostics = moduleInitializer.getDiagnostics();
      console.log('üìä Diagn√≥stico del sistema:', diagnostics);
      
    } catch (error) {
      console.error('‚ùå Error inicializando site Zoomy:', error);
      throw error;
    }
  },
  
  /**
   * Funci√≥n para obtener el inicializador de m√≥dulos
   * √ötil para debugging y gesti√≥n manual
   */
  getModuleInitializer: () => {
    return moduleInitializer;
  },
  
  /**
   * Funci√≥n para destruir el site
   * Limpia todos los m√≥dulos y recursos
   */
  destroy: async () => {
    console.log('üóëÔ∏è  Destruyendo site Zoomy...');
    if (moduleInitializer) {
      await moduleInitializer.destroy();
      moduleInitializer = null;
    }
    console.log('‚úÖ Site Zoomy destruido');
  }
};

/**
 * Configura listeners de eventos del ModuleInitializer
 */
function setupEventListeners(initializer) {
  // Eventos de inicializaci√≥n general
  initializer.on('initialization:start', (data) => {
    console.log(`üîÑ Iniciando inicializaci√≥n de ${data.siteId}...`);
  });
  
  initializer.on('initialization:complete', (data) => {
    console.log(`‚úÖ Inicializaci√≥n completada: ${data.criticalCount} cr√≠ticos, ${data.lazyCount} lazy`);
  });
  
  initializer.on('initialization:error', (data) => {
    console.error(`‚ùå Error en inicializaci√≥n:`, data.error);
  });
  
  // Eventos de m√≥dulos individuales
  initializer.on('module:initializing', (data) => {
    console.log(`‚è≥ Inicializando m√≥dulo: ${data.instanceId}...`);
  });
  
  initializer.on('module:initialized', (data) => {
    console.log(`‚úÖ M√≥dulo inicializado: ${data.instanceId}`);
  });
  
  initializer.on('module:mounting', (data) => {
    console.log(`üì¶ Montando m√≥dulo: ${data.instanceId}...`);
  });
  
  initializer.on('module:mounted', (data) => {
    console.log(`‚úÖ M√≥dulo montado: ${data.instanceId}`);
  });
  
  initializer.on('module:error', (data) => {
    console.error(`‚ùå Error en m√≥dulo ${data.instanceId} [${data.phase}]:`, data.error);
  });
  
  // Eventos de lazy loading
  initializer.on('module:lazy-loading', (data) => {
    console.log(`‚è≥ Cargando m√≥dulo lazy: ${data.instanceId}...`);
  });
  
  initializer.on('module:lazy-loaded', (data) => {
    console.log(`‚úÖ M√≥dulo lazy cargado: ${data.instanceId}`);
  });
  
  initializer.on('module:lazy-error', (data) => {
    console.error(`‚ùå Error cargando m√≥dulo lazy ${data.instanceId}:`, data.error);
  });
}

/**
 * Registra la jerarqu√≠a de m√≥dulos en el PolicyProcessor
 * Esto es crucial para que los hooks de redirecci√≥n funcionen correctamente
 */
async function registerModuleHierarchyInPolicy() {
  const siteName = 'zoomy';
  
  // Registrar configuraci√≥n de autenticaci√≥n del site si existe
  if (siteConfig.auth) {
    policyProcessor.registerSiteAuthConfig(siteName, siteConfig.auth);
  }
  
  // Iterar sobre los m√≥dulos definidos en site.config.js
  if (siteConfig.modules && Array.isArray(siteConfig.modules)) {
    for (const moduleInstance of siteConfig.modules) {
      const moduleType = moduleInstance.module; // 'auth', 'admin', etc.
      const moduleId = moduleInstance.id; // 'auth-panel', 'admin-main', etc.
      const parentModule = moduleInstance.routing?.parentModule || null;
      
      console.log(`  üì¶ Registrando m√≥dulo: ${moduleId} (tipo: ${moduleType})${parentModule ? ` bajo ${parentModule}` : ''}`);
      
      // Registrar en la jerarqu√≠a usando el TIPO del m√≥dulo como nombre
      // Pero la configuraci√≥n incluye el ID √∫nico
      // Cargar config local del m√≥dulo si existe (src/modules/{moduleType}/config/authConfig.js)
      let localModuleConfig = null;
      try {
        // Solo intentamos cargar authConfig cuando el tipo es el m√≥dulo due√±o de auth rules (p.ej. admin, auth)
        const modPath = `../../modules/${moduleType}/config/authConfig.js`;
        const imported = await import(/* @vite-ignore */ modPath);
        localModuleConfig = imported?.default || imported?.[`${moduleType}AuthConfig`] || null;
      } catch (e) {
        // Es normal que algunos m√≥dulos no tengan authConfig local
      }

      // Mezclar auth y rutas de la instancia con el authConfig local (local tiene prioridad)
      const mergedModuleForHierarchy = {
        ...moduleInstance,
        auth: {
          ...(moduleInstance.auth || {}),
          ...(localModuleConfig?.auth || {})
        },
        protectedRoutes: {
          ...(moduleInstance.protectedRoutes || {}),
          ...(localModuleConfig?.protectedRoutes || {})
        },
        publicRoutes: [
          ...new Set([...(moduleInstance.publicRoutes || []), ...(localModuleConfig?.publicRoutes || [])])
        ]
      };

      policyProcessor.registerModuleHierarchy(
        siteName,
        moduleType, // Usar el tipo gen√©rico para la jerarqu√≠a
        mergedModuleForHierarchy,
        parentModule
      );
      
      // Registrar tambi√©n en moduleConfigs con el tipo del m√≥dulo
      if (mergedModuleForHierarchy.auth || mergedModuleForHierarchy.protectedRoutes || mergedModuleForHierarchy.publicRoutes) {
        const moduleConfig = {
          moduleName: moduleType, // Usar tipo gen√©rico
          instanceId: moduleId, // ID √∫nico
          auth: mergedModuleForHierarchy.auth,
          protectedRoutes: mergedModuleForHierarchy.protectedRoutes || {},
          publicRoutes: mergedModuleForHierarchy.publicRoutes || []
        };
        policyProcessor.registerModule(moduleConfig);
      }
    }
  }
  
  // Debug: Mostrar jerarqu√≠a registrada
  const hierarchy = policyProcessor.getHierarchy(siteName);
  console.log('üå≥ Jerarqu√≠a registrada:', JSON.stringify(hierarchy, null, 2));
}

/**
 * Registra las rutas de todos los m√≥dulos cargados
 * 
 * Este m√©todo conecta el ModuleInitializer con el sistema de rutas existente
 * Cada m√≥dulo ya ha llamado a registerModuleRoutes en su m√©todo install()
 */
async function registerModuleRoutes(initializer) {
  const allInstances = initializer.getAllModuleInstances();
  
  console.log(`üìç M√≥dulos montados: ${Object.keys(allInstances).length}`);
  
  // Iterar sobre cada instancia de m√≥dulo
  for (const [instanceId, instance] of Object.entries(allInstances)) {
    const moduleData = initializer.modules.get(instanceId);
    const moduleConfig = moduleData.config;
    
    console.log(`  - ${instanceId} (${moduleConfig.module || moduleConfig.name})`);
    
    // Las rutas ya fueron registradas durante el install() del m√≥dulo
    // Este log es solo para confirmaci√≥n
    if (moduleConfig.routing) {
      const { parentModule, routePrefix } = moduleConfig.routing;
      const basePath = parentModule 
        ? `/zoomy/${parentModule}/${routePrefix}`
        : `/zoomy/${routePrefix}`;
      console.log(`    ‚îî‚îÄ Rutas: ${basePath}/*`);
    }
  }
  
  console.log('‚úÖ Todas las rutas de m√≥dulos est√°n registradas');
}

