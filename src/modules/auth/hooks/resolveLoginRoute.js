// src/modules/auth/hooks/resolveLoginRoute.js
// Resolver de ruta de login ubicado en el m√≥dulo Auth.
// Usa una heur√≠stica segura antes de que la jerarqu√≠a est√© disponible y,
// cuando ya est√°, valida con PolicyProcessor para preferir el auth local.

import { policyProcessor } from '../../../zoom/security/policyProcessor.js';

/**
 * Obtiene la ruta de login correcta considerando jerarqu√≠a y contexto actual.
 * - Si estamos dentro de /site/{module}/..., preferimos /site/{module}/auth/login
 *   incluso si la jerarqu√≠a a√∫n no est√° lista (evita fallback al auth ra√≠z del site).
 * - Si la jerarqu√≠a confirma que {module} tiene subm√≥dulo auth, usamos esa ruta.
 * - Si estamos ya en /site/auth/..., usamos el auth del site.
 * - Fallback: /{site}/auth/login
 */
export function resolveLoginRoute(pathname, fallbackSite = 'zoomy') {
  const path = typeof pathname === 'string'
    ? pathname
    : (typeof window !== 'undefined' ? window.location.pathname : '/');

  console.log('[resolveLoginRoute] üîç Evaluando pathname:', path);

  const segments = path.split('/').filter(Boolean); // [site, maybeModule, maybeAuth, ...]
  const siteName = segments[0] || fallbackSite;
  const first = segments[1] || null;   // 'auth' o un m√≥dulo: 'admin', 'panel', etc.
  const second = segments[2] || null;  // puede ser 'auth'

  console.log('[resolveLoginRoute] üìä Segmentos:', { siteName, first, second });

  // 1) Si ya estamos dentro de /site/auth/... ‚Üí auth del site
  if (first === 'auth') {
    const route = `/${siteName}/auth/login`;
    console.log('[resolveLoginRoute] ‚úÖ Case 1: Auth del site:', route);
    return route;
  }

  // 2) Si estamos en /site/{module}/auth/... ‚Üí auth del m√≥dulo
  if (first && second === 'auth') {
    const route = `/${siteName}/${first}/auth/login`;
    console.log('[resolveLoginRoute] ‚úÖ Case 2: Auth del m√≥dulo (ya en /auth):', route);
    return route;
  }

  // 3) Si estamos en /site/{module}/... (y no es 'auth') ‚Üí preferir auth local del m√≥dulo
  if (first && first !== 'auth') {
    console.log('[resolveLoginRoute] üîç Case 3: Detectado m√≥dulo:', first);
    
    // Validar con jerarqu√≠a si est√° disponible
    const hasAuthSubmodule = !!policyProcessor?.hierarchy?.[siteName]?.modules?.[first]?.children?.auth;
    console.log('[resolveLoginRoute] üìã Jerarqu√≠a disponible:', !!policyProcessor?.hierarchy);
    console.log('[resolveLoginRoute] üìã Tiene subm√≥dulo auth:', hasAuthSubmodule);
    
    if (hasAuthSubmodule) {
      const route = `/${siteName}/${first}/auth/login`;
      console.log('[resolveLoginRoute] ‚úÖ Case 3a: Auth del m√≥dulo (validado por jerarqu√≠a):', route);
      return route;
    }
    
    // Jerarqu√≠a no lista o sin registro ‚Üí heur√≠stica por defecto: usar auth del m√≥dulo
    const route = `/${siteName}/${first}/auth/login`;
    console.log('[resolveLoginRoute] ‚úÖ Case 3b: Auth del m√≥dulo (heur√≠stica):', route);
    return route;
  }

  // 4) Fallback final ‚Üí auth del site
  const route = `/${siteName}/auth/login`;
  console.log('[resolveLoginRoute] ‚úÖ Case 4: Fallback auth del site:', route);
  return route;
}

export default resolveLoginRoute;
